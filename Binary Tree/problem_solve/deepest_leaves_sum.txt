Given the root of a binary tree, return the sum of values of its deepest leaves.
 

Example 1:


Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
Output: 15
Example 2:

Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 19
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
1 <= Node.val <= 100



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int max_height(TreeNode* root){
        if(root == NULL){
            return 1;
        }
        if(root->left ==NULL && root->right==NULL){
            return 1;
        }
        int l =max_height(root->left);
        int r =max_height(root->right);
        return max(l,r)+1;
    }
    int deepestLeavesSum(TreeNode* root) {
        int mx=max_height(root);
        queue<pair<TreeNode *,int>>q;
        q.push({root,1});
        int sum=0;
        while(!q.empty()){
            pair<TreeNode *,int> parent=q.front();
            q.pop();

            TreeNode * node=parent.first;
            int level=parent.second;

            if(level == mx){
                sum+=node->val;
            }

            if(node->left !=NULL){
                q.push({node->left,level+1});
            }
            if(node->right !=NULL){
                q.push({node->right,level+1});
            }

            
        }
        return sum;
        
    }
};